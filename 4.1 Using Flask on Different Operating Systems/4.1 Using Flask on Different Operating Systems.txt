-> flask installation & setup lesson  
   -> using flask on different operating systems  
   -> lesson duration: 6 minutes  

-> introduction  
   -> this lesson focuses on preparing your computer for flask development  
      -> covers installation of python, flask, and supporting tools across different operating systems  
      -> ensures your environment is properly set up for real-world flask application development  
   -> local development is emphasised to foster better understanding and hands-on experience with essential tools  

-> why code locally?  
   -> advantages of local coding over browser-based platforms:  
      -> develops proficiency with tools required for professional development  
         -> teaches how to install, configure, and manage a development stack  
         -> encourages debugging and problem-solving in a real-world context  
      -> provides a stable foundation for future projects  
         -> avoids dependency on online environments, which may oversimplify workflows  
         -> prepares you to manage local development environments independently  
      -> supports deeper learning by offering full control over the development process  
   -> while browser-based tools like repl.it are convenient, they do not replicate real-world development scenarios  
      -> local setup enables full control over project dependencies, system configurations, and deployment practices  

-> key setup components for flask development  
   -> **python**:  
      -> flask requires python 3.6 or higher for compatibility with modern libraries  
      -> steps to install python:  
         -> **linux**: use package managers like `apt`, `yum`, or `dnf`  
            example: `sudo apt update && sudo apt install python3`  
         -> **macos**: use homebrew for installation  
            example: `brew install python`  
         -> **windows**: download and install python from the official [python website](https://www.python.org/)  
            -> ensure that you check the box to add python to your system path during installation  
      -> verify python installation: run `python3 --version` or `python --version` in your terminal  

   -> **code editor**:  
      -> recommended: visual studio code (vs code) for its simplicity and powerful extensions  
      -> alternative options: pycharm, sublime text, or other python-friendly editors  
   -> **virtual environment**:  
      -> why use virtual environments?  
         -> isolates dependencies for each project to prevent version conflicts  
         -> simplifies dependency management and ensures reproducibility  
      -> tools for creating virtual environments:  
         -> use `venv` (bundled with python)  
         -> example commands:  
            -> create: `python3 -m venv venv`  
            -> activate:  
               -> **linux/macos**: `source venv/bin/activate`  
               -> **windows**: `venv\scripts\activate`  
      -> deactivate virtual environment: use the `deactivate` command  
   -> **flask**: install flask using `pip` inside your virtual environment  
      -> command: `pip install flask`  

-> installing flask on different operating systems  
   -> this course uses ubuntu (a linux-based, unix-like os) as the reference system  
      -> unix-based systems are standard for web development due to their compatibility with most tools  
      -> if using macos or other linux distributions, follow along with minor adjustments as needed  

   -> **unix-based operating systems**:  
      -> **ubuntu**: fully compatible with course tutorials; follow the instructions as is  
      -> **other linux distributions (e.g., fedora, arch linux)**:  
         -> install python and flask using the distribution's package manager  
         -> commands may vary slightly, but principles remain consistent  
      -> **macos**:  
         -> leverage tools like `brew` (homebrew) for installing python and other dependencies  
         -> example: `brew install python`  
      -> key steps for unix-based systems:  
         -> install python 3.6+  
         -> install a code editor (like vs code)  
         -> set up and activate a virtual environment  
         -> use `pip install flask` to add flask to your project  

   -> **windows operating systems**:  
      -> two recommended options for unix-like environments on windows:  
         -> **windows subsystem for linux (wsl)**:  
            -> wsl enables you to run a full linux distribution within windows  
            -> allows seamless execution of unix-based commands and tools  
            -> steps to install wsl:  
               -> open powershell as administrator  
               -> run: `wsl --install` (for windows 10/11)  
               -> restart your system, then set up your linux distribution (e.g., ubuntu)  
               -> install python, flask, and other tools within the linux environment  
            -> official microsoft tutorial provides detailed guidance  
         -> **git bash**:  
            -> lightweight alternative for users unable to install wsl  
            -> comes packaged with git and provides a unix-like terminal  
            -> steps to install git bash:  
               -> download git from [git for windows](https://git-scm.com/)  
               -> select the option to include git bash during installation  
               -> use git bash as your terminal to run unix-style commands  

-> why use a unix-based environment?  
   -> web development is often optimised for unix-based systems due to:  
      -> compatibility with web servers and hosting environments  
      -> standardised tooling and command-line interfaces  
   -> working in a unix environment prepares you for deploying and managing flask applications in production  

-> summary: python flask framework os requirements  
   -> **unix-based systems (linux, macos)**:  
      -> if using linux (e.g., ubuntu) or macos, follow along with the course without additional steps  
   -> **windows systems**:  
      -> install and configure wsl or git bash for a compatible development environment  
      -> using wsl is the preferred approach for its native linux support  
      -> ensure that all setup is completed within your chosen unix-based shell before proceeding